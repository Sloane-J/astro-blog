---
import BaseLayout from '../../layouts/BaseLayout.astro';
import ShareThisScript from '../../components/ShareThisScript.astro';
import ShareThisButton from '../../components/ShareThisButton.astro';
import { Image } from 'astro:assets';

// Define interface for post data structure
interface BlogPost {
  frontmatter: {
    title: string;
    description: string;
    publishDate: string;
    author?: string;
    category?: string;
    tags?: string[];
    featuredImage?: any;
  };
  file: string;
  Content: any;
}

export async function getStaticPaths() {
  const postModules = import.meta.glob<{
    frontmatter: BlogPost['frontmatter'];
    Content: any;
    file: string;
  }>('../../data/blog-posts/*.md', { eager: true });

  const allPosts = Object.entries(postModules).map(([path, post]) => ({
    ...post,
    file: path // Use the path from entries instead of post.file
  }));

  return allPosts.map((post) => {
    const slug = post.file.split('/').pop()?.split('.').shift() || '';
    return {
      params: { slug },
      props: { 
        post,
        allPosts 
      }
    };
  });
}

// Get the post from props passed by getStaticPaths
const { post, allPosts } = Astro.props;

// Extract and prepare meta data more efficiently
const { title, description, publishDate, author, category, tags, featuredImage } = post.frontmatter;
const slug = post.file.split('/').pop()?.split('.').shift() || '';
const permalink = `${Astro.site.href}blog/${slug}`;

// Format the publish date for better readability
const formattedDate = new Date(publishDate).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Find related posts based on category
function getRelatedPosts(currentPost: BlogPost, allPosts: BlogPost[]) {
  const currentCategory = currentPost.frontmatter.category;
  const currentPostSlug = currentPost.file.split('/').pop()?.split('.').shift() || '';
  
  if (!currentCategory) return [];

  // Filter posts by matching category and exclude current post
  return allPosts
    .filter(post => {
      const postSlug = post.file.split('/').pop()?.split('.').shift() || '';
      return (
        // Match category and exclude current post
        post.frontmatter.category === currentCategory && 
        postSlug !== currentPostSlug
      );
    })
    // Sort by publish date (most recent first)
    .sort((a, b) => 
      new Date(b.frontmatter.publishDate).valueOf() - 
      new Date(a.frontmatter.publishDate).valueOf()
    )
    // Limit to 3 related posts
    .slice(0, 3);
}

const relatedPosts = getRelatedPosts(post, allPosts);
---

<BaseLayout title={title} description={description} permalink={permalink}>

  <ShareThisScript /> <!-- Add the script to the head -->

  <div class="container">
    <header class="post-header">
      <h1>{title}</h1>
      <div class="post-byline">
        {author && <span class="post-author">by {author}</span>}
        <time class="post-date" datetime={publishDate}>{formattedDate}</time>
      </div>
      
      {(category || (tags && tags.length > 0)) && (
        <div class="post-meta">
          {category && <span class="category">{category}</span>}
          
          {tags && tags.length > 0 && (
            <div class="tags">
              {tags.map((tag) => <span class="tag">{tag}</span>)}
            </div>
          )}
        </div>
      )}
    </header>
    
    {featuredImage && (
      <div class="featured-image-container">
        <!-- Use Astro's Image component for automatic optimization -->
        <Image 
          src={featuredImage} 
          alt={title} 
          class="featured-image" 
          width={800} 
          height={450} 
          loading="lazy" 
          format="webp"
        />
      </div>
    )}
    
    <article class="content">
      <post.Content />

      <ShareThisButton /> <!-- Add the ShareThis buttons -->

    </article>
    
    <!-- Related Posts Section -->
    {relatedPosts.length > 0 && (
      <section class="related-posts">
        <h2>Related Posts</h2>
        <div class="related-posts-grid">
          {relatedPosts.map((relatedPost) => {
            const relatedPostSlug = relatedPost.file.split('/').pop()?.split('.').shift() || '';
            return (
              <a href={`/blog/${relatedPostSlug}`} class="related-post-card">
                {relatedPost.frontmatter.featuredImage && (
                  <div class="related-post-image">
                    <Image 
                      src={relatedPost.frontmatter.featuredImage} 
                      alt={relatedPost.frontmatter.title} 
                      width={300} 
                      height={180} 
                      loading="lazy" 
                      format="webp"
                    />
                  </div>
                )}
                <div class="related-post-content">
                  <h3>{relatedPost.frontmatter.title}</h3>
                  {relatedPost.frontmatter.category && (
                    <span class="related-post-category">{relatedPost.frontmatter.category}</span>
                  )}
                  {relatedPost.frontmatter.description && (
                    <p class="related-post-excerpt">{relatedPost.frontmatter.description.slice(0, 100)}...</p>
                  )}
                </div>
              </a>
            );
          })}
        </div>
      </section>
    )}
    
    <div class="back-link">
      <a href="/">&larr; Back to Blog</a>
    </div>

    <div id="disqus_thread"></div>
    <script>
        /**
        *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
        *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */
        
        var disqus_config = function () {
        this.page.url = `${Astro.url}`;  // Replace PAGE_URL with your page's canonical URL variable
        this.page.identifier = `${Astro.slug}`; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
        };
        
        (function() { // DON'T EDIT BELOW THIS LINE
        var d = document, s = d.createElement('script');
        s.src = 'https://luminary-1.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

  </div>
  <script id="dsq-count-scr" src="//luminary-1.disqus.com/count.js" async></script>
</BaseLayout>

<style>
  /* Container width to match index page */
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }
  
  .post-header {
    margin-bottom: 2rem;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }
  
  h1 {
    font-size: 2.5rem;
    line-height: 1.2;
    margin-bottom: 1rem;
    font-weight: 700;
  }
  
  .post-byline {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 1rem;
    color: var(--text-secondary);
    font-size: 0.95rem;
  }
  
  .post-author {
    font-weight: 500;
  }
  
  .post-date {
    display: inline-block;
  }
  
  .featured-image-container {
    margin: 2rem auto;
    border-radius: 8px;
    overflow: hidden; /* Ensures the image border-radius is applied */
    max-width: 800px;
  }
  
  .featured-image {
    width: 100%;
    height: auto; /* Let aspect ratio be maintained by Image component */
    display: block; /* Removes bottom space */
  }
  
  .post-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 15px;
    align-items: center;
  }
  
  .category {
    background-color: var(--primary-color, #4a6cf7);
    color: white;
    padding: 3px 10px;
    border-radius: 20px;
    font-size: 0.85rem;
    font-weight: 500;
    text-decoration: none;
    display: inline-block;
  }
  
  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .tag {
    background-color: #e0e0e0;
    color: #555555;
    padding: 3px 10px;
    border-radius: 20px;
    font-size: 0.85rem;
    font-weight: 500;
  }
  
  .content {
    margin: 2rem auto;
    /* Content width for better readability */
    max-width: 800px;
    line-height: 1.6;
  }
  
  /* Related Posts Styles */
  .related-posts {
    max-width: 800px;
    margin: 3rem auto 2rem;
  }
  
  .related-posts h2 {
    font-size: 1.8rem;
    margin-bottom: 1.5rem;
    font-weight: 600;
    color: var(--text-primary);
  }
  
  .related-posts-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
  }
  
  .related-post-card {
    display: flex;
    flex-direction: column;
    border-radius: 6px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    transition: transform 0.2s ease;
    background-color: white;
    text-decoration: none;
    color: inherit;
  }
  
  .related-post-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.12);
  }
  
  .related-post-image {
    height: 140px; /* Reduced from 160px */
    overflow: hidden;
  }
  
  .related-post-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }
  
  .related-post-card:hover .related-post-image img {
    transform: scale(1.05);
  }
  
  .related-post-content {
    padding: 0.75rem; /* Reduced from 1rem */
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }
  
  .related-post-content h3 {
    font-size: 0.95rem; /* Reduced from 1.1rem */
    margin-bottom: 0.25rem;
    font-weight: 600;
    line-height: 1.4;
    color: var(--text-primary);
  }
  
  .related-post-category {
    font-size: 0.75rem;
    background-color: var(--primary-color, #4a6cf7);
    color: white;
    padding: 2px 6px;
    border-radius: 20px;
    align-self: flex-start;
    margin-bottom: 0.5rem;
  }
  
  .related-post-excerpt {
    font-size: 0.85rem;
    color: #555555;
    margin-bottom: 0;
    line-height: 1.5;
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 2; /* Reduced from 3 lines */
    -webkit-box-orient: vertical;
    margin-top: 0.25rem;
  }
  
  /* Improved responsive breakpoints */
  @media (max-width: 768px) {
    .related-posts-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 0.75rem;
    }

    .related-post-image {
      height: 120px;
    }
  }

  @media (max-width: 480px) {
    .related-posts-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .related-post-card {
      flex-direction: row;
      height: 100px;
    }

    .related-post-image {
      width: 100px;
      height: 100px;
      flex-shrink: 0;
    }

    .related-post-content {
      flex: 1;
    }

    .related-post-excerpt {
      display: none; /* Hide excerpt on mobile */
    }
  }
  
  /* Responsive styles for related posts */
  @media (max-width: 768px) {
    .related-posts-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (max-width: 576px) {
    .related-posts-grid {
      grid-template-columns: 1fr;
    }
  }
  
  /* Responsive typography */
  @media (max-width: 768px) {
    h1 {
      font-size: 2rem;
    }
    
    .content {
      font-size: 1rem;
    }
  }
  
  .back-link {
    margin: 2rem auto;
    max-width: 800px;
  }
  
  .back-link a {
    display: inline-flex;
    align-items: center;
    padding: 0.4rem 0.8rem;
    font-size: 0.9rem;
    color: var(--text-secondary);
    text-decoration: none;
    border: 1px solid var(--text-secondary);
    border-radius: 4px;
    transition: all 0.2s ease;
    font-weight: 500;
  }
  
  .back-link a:hover {
    color: var(--primary-color);
    border-color: var(--primary-color);
    transform: translateX(-3px);
  }
  
  /* Disqus comments container */
  #disqus_thread {
    max-width: 800px;
    margin: 3rem auto 0;
  }
</style>