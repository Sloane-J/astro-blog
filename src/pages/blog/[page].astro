---
// src/pages/blog/[page].astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import Pagination from "../../components/Pagination.astro";

export async function getStaticPaths() {
  const postsPerPage = 5;
  
  // Use import.meta.glob with { eager: true } to get the content immediately
  const postModules = import.meta.glob("../../data/blog-posts/*.md", { eager: true });
  
  // Convert object to array of posts
  const allPosts = Object.entries(postModules).map(([path, module]) => {
    const slug = path.split('/').pop().replace('.md', '');
    return {
      slug,
      path,
      ...module.frontmatter
    };
  });

  // Sort posts by date (newest first)
  const sortedPosts = allPosts.sort((a, b) => 
    new Date(b.publishDate).valueOf() - new Date(a.publishDate).valueOf()
  );
  
  const totalPages = Math.ceil(sortedPosts.length / postsPerPage);
  
  // Create an array for each page
  return Array.from({ length: totalPages }).map((_, i) => {
    const pageNum = i + 1;
    const start = i * postsPerPage;
    const paginatedPosts = sortedPosts.slice(start, start + postsPerPage);
    
    // Skip page 1 as it's handled by /blog/index.astro
    if (pageNum === 1) {
      return null;
    }
    
    return {
      params: { page: String(pageNum) },
      props: { paginatedPosts, currentPage: pageNum, totalPages }
    };
  }).filter(page => page !== null); // Filter out null values (page 1)
}

const { paginatedPosts, currentPage, totalPages } = Astro.props;
const title = `Blog - Page ${currentPage}`;
const description = `Blog posts - Page ${currentPage} of ${totalPages}`;
---

<BaseLayout title={title} description={description} current="blog">
  <div class="container">
    <h1>Blog Posts</h1>
    <p>Page {currentPage} of {totalPages}</p>
    
    <ul class="post-list">
      {paginatedPosts.map(post => (
        <li class="post-item">
          <a href={`/blog/${post.slug}`}>
            <h2>{post.title}</h2>
            <p>{post.description}</p>
            <div class="post-meta">
              <span class="post-date">
                {new Date(post.publishDate).toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
                })}
              </span>
              {post.category && <span class="post-category">{post.category}</span>}
            </div>
          </a>
        </li>
      ))}
    </ul>
    
    <Pagination currentPage={currentPage} totalPages={totalPages} urlBase="/blog" />
  </div>
</BaseLayout>