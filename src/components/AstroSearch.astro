---
import "@pagefind/default-ui/css/ui.css";

export interface Props {
  readonly id?: string;
  readonly className?: string;
  readonly query?: string;
  readonly uiOptions?: Record<string, any>;
}

const { id, className, query, uiOptions = {} } = Astro.props;
const bundlePath = `${import.meta.env.BASE_URL}pagefind/`;
---

<div
  id={id}
  class:list={[className, "pagefind-init"]}
  data-pagefind-ui
  data-bundle-path={bundlePath}
  data-query={query}
  data-ui-options={JSON.stringify(uiOptions)}
>
</div>

<script>
  class PageFindInitializer {
    private static readonly INIT_DELAY = 100;

    static async initialize() {
      try {
        const { PagefindUI } = await import('@pagefind/default-ui');
        const elements = document.querySelectorAll('[data-pagefind-ui].pagefind-init');
        
        elements.forEach(el => this.setupSearchElement(el, PagefindUI));
      } catch (e) {
        console.error("Error initializing PagefindUI:", e);
      }
    }

    private static setupSearchElement(el: Element, PagefindUI: any) {
      const elSelector = this.buildSelector(el);
      const bundlePath = el.getAttribute("data-bundle-path");
      const opts = JSON.parse(el.getAttribute("data-ui-options") ?? "{}");

      new PagefindUI({
        ...opts,
        element: elSelector,
        bundlePath,
      });

      el.classList.remove("pagefind-init");
      this.handleQueryParams(el);
    }

    private static buildSelector(el: Element): string {
      return [
        ...(el.id ? [`#${el.id}`] : []),
        ...[...el.classList.values()].map(c => `.${c}`),
        '[data-pagefind-ui]'
      ].join("");
    }

    private static handleQueryParams(el: Element) {
      let query = el.getAttribute("data-query");
      const url = new URL(window.location.href);
      const params = new URLSearchParams(url.search);

      if (params.has("q")) {
        query = params.get("q");
      }

      setTimeout(() => {
        const input = el.querySelector('input[type="text"]') as HTMLInputElement;
        if (!input) return;

        if (query) {
          input.value = query;
          input.dispatchEvent(new Event("input", { bubbles: true }));
          input.focus();
        }

        this.setupInputListener(input);
      }, this.INIT_DELAY);
    }

    private static setupInputListener(input: HTMLInputElement) {
      input.addEventListener("input", (e) => {
        const target = e.target as HTMLInputElement;
        const url = new URL(window.location.href);
        const params = new URLSearchParams(url.search);

        if (target.value) {
          params.set("q", target.value);
        } else {
          params.delete("q");
        }

        window.history.replaceState(
          {}, 
          "", 
          params.toString() ? `${url.pathname}?${params}` : url.pathname
        );
      });
    }
  }

  // Initialize on Astro page load
  document.addEventListener("astro:page-load", () => PageFindInitializer.initialize());

  // Initialize on regular page load
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => PageFindInitializer.initialize());
  } else {
    PageFindInitializer.initialize();
  }
</script>

<style>
  :global(.pagefind-ui) {
    --pagefind-ui-scale: 0.95;
    --pagefind-ui-primary: var(--primary-color);
    --pagefind-ui-text: var(--text-main);
    --pagefind-ui-background: var(--background-body);
    --pagefind-ui-border: #e1e1e1;
    --pagefind-ui-border-radius: 8px;
    --pagefind-ui-font: var(--font-family-sans);
  }

  :global(.pagefind-ui__search-input) {
    border-radius: 8px !important;
  }

  :global(.pagefind-ui__results-area) {
    margin-top: 1rem;
  }
</style>