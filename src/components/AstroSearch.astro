---
import "@pagefind/default-ui/css/ui.css";

export interface Props {
  readonly id?: string;
  readonly className?: string;
  readonly query?: string;
  readonly uiOptions?: Record<string, any>;
}

const { id, className, query, uiOptions = {} } = Astro.props;
const bundlePath = `${import.meta.env.BASE_URL}pagefind/`;
---

<div
  id={id}
  class:list={[className, "pagefind-init"]}
  data-pagefind-ui
  data-bundle-path={bundlePath}
  data-query={query}
  data-ui-options={JSON.stringify(uiOptions)}
>
</div>

<script>
  // Wait for the module to be available
  const initPageFind = async () => {
    try {
      // Dynamically import PagefindUI
      const { PagefindUI } = await import('@pagefind/default-ui');
      
      const allSelector = "[data-pagefind-ui]";
      for (const el of document.querySelectorAll(
        `${allSelector}.pagefind-init`
      )) {
        const elSelector = [
          ...(el.id ? [`#${el.id}`] : []),
          ...[...el.classList.values()].map((c) => `.${c}`),
          allSelector,
        ].join("");
        
        const bundlePath = el.getAttribute("data-bundle-path");
        const opts = JSON.parse(el.getAttribute("data-ui-options") ?? "{}");
        
        new PagefindUI({
          ...opts,
          element: elSelector,
          bundlePath,
        });
        
        el.classList.remove("pagefind-init");
        let query = el.getAttribute("data-query");

        // Check if the current URL has any query params
        const url = new URL(window.location.href);
        const params = new URLSearchParams(url.search);
        if (params.has("q")) {
          query = params.get("q");
        }

        // Wait a moment for PagefindUI to initialize its elements
        setTimeout(() => {
          const input = el.querySelector(`input[type="text"]`);
          
          if (input && query) {
            input.value = query;
            input.dispatchEvent(new Event("input", { bubbles: true }));
            input.focus();
          }

          // Add Listener to update the URL when the input changes
          if (input) {
            input.addEventListener("input", (e) => {
              const input = e.target as HTMLInputElement;
              const url = new URL(window.location.href);
              const params = new URLSearchParams(url.search);
              
              if (input.value) {
                params.set("q", input.value);
              } else {
                params.delete("q");
              }
              
              window.history.replaceState({}, "", 
                params.toString() ? `${url.pathname}?${params}` : url.pathname
              );
            });
          }
        }, 100);
      }
    } catch (e) {
      console.error("Error initializing PagefindUI:", e);
    }
  };

  // Initialize on page load
  document.addEventListener("astro:page-load", initPageFind);
  
  // Also initialize on regular page load for non-Astro View Transitions
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initPageFind);
  } else {
    initPageFind();
  }
</script>